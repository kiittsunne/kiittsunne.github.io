"use strict";(self.webpackChunkkit_s_portfolio=self.webpackChunkkit_s_portfolio||[]).push([[805],{6410:function(e,t,n){function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{ah:function(){return s}});var r=n(7294);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var i=r.createContext({});function s(e){var t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):o(o({},t),e)}),[t,e])}},9520:function(e,t,n){n.r(t),n.d(t,{default:function(){return s}});var l=n(6410),r=n(7294),a=n(841),o=function(e){var t=e.images,n=e.maxWidth;return r.createElement("div",{className:"index-module--wrapper--6cd18",style:{maxWidth:n}},t.map((function(e){return r.createElement(a.Z,e)})))};function i(e){var t=Object.assign({h3:"h3",p:"p",ul:"ul",li:"li",code:"code",h4:"h4",strong:"strong",pre:"pre",em:"em",a:"a"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.h3,null,"Project Overview"),"\n",r.createElement(t.p,null,"Wardle is a Wordle clone with a turn-based twist. The player will race against a CPU to guess a 5-letter word in 6 tries or fewer."),"\n",r.createElement(a.Z,{src:"https://res.cloudinary.com/kiittsunne/video/upload/e_loop:10,c_scale,q_100,w_350/v1666338188/wardle_1_tqrylq.gif",alt:"Wardle"}),"\n",r.createElement(t.p,null,"Using data attributes, I was able to build a theme-changer. In each case, the green shade still represents correctly placed letters, but the traditional yellow tiles are replaced by a theme colour."),"\n",r.createElement(a.Z,{src:"https://res.cloudinary.com/kiittsunne/video/upload/e_loop:10,c_scale,q_100,w_350/v1666338188/wardle_2.gif",alt:"Wardle Themes"}),"\n",r.createElement("hr"),"\n",r.createElement(t.h3,null,"Technologies & Motivations"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Vanilla HTML, CSS, JS"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"JS: DOM manipulation via browser events"),"\n",r.createElement(t.li,null,"JSON instead of API for word list"),"\n"),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Aiming to have the game be playable on pc browser for initial version"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"mobile browser version: might require UI re-design, will keep it simple for now."),"\n"),"\n"),"\n"),"\n",r.createElement(t.p,null,"As ",r.createElement(t.code,null,"Wardle")," was my first project under General Assembly (GA), I took the opportunity to deepen my understanding of CSS animations and DOM manipulation techniques. I also attempted designing a 'fake AI' system, to make my Wordle clone more unique."),"\n",r.createElement("hr"),"\n",r.createElement(t.h3,null,"Retrospective: Process Notes, Key Learning Points, Future Plans"),"\n",r.createElement(t.h4,null,"Process notes:"),"\n",r.createElement(t.p,null,"At the beginning of the project week, I drafted some daily story points as a guide for my development process."),"\n",r.createElement(o,{images:[{src:"https://res.cloudinary.com/kiittsunne/image/upload/v1666344875/website/wardle_monday.png",alt:"Monday"},{src:"https://res.cloudinary.com/kiittsunne/image/upload/v1666344877/website/wardle_tuesday.png",alt:"Tuesday"},{src:"https://res.cloudinary.com/kiittsunne/image/upload/v1666344881/website/wardle_wednesday.png",alt:"Wednesday"},{src:"https://res.cloudinary.com/kiittsunne/image/upload/v1666344886/website/wardle_thursday.png",alt:"Thursday"}],maxWidth:"600px"}),"\n",r.createElement(t.p,null,"Because of how straight-forward this project's goals were, and the relative simplicity of the UI, I was able to focus on the game logic."),"\n",r.createElement(t.h4,null,"Key Learning Points"),"\n",r.createElement(t.p,null,"Two challenges in particular were highly educational experiences."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"1. Synthetic Events do not bubble by default")),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-JavaScript"},'function submitCpuInput(lettersArr) {\n  lettersArr.push("GO");\n  let interval = 200;\n  let increment = 1;\n  let clickEvent = new Event("click", { bubbles: true });\n  // sauce: https://stackoverflow.com/questions/25256535/javascript-set-interval-for-each-array-value-setinterval-array-foreach/37215055#37215055\n  for (let i = 0; i <= WORD_LENGTH; i++) {\n    let runner = setTimeout(() => {\n      document\n        .querySelector(`[data-cpu-key="${lettersArr[i]}"]`)\n        .dispatchEvent(clickEvent);\n      clearTimeout(runner);\n    }, interval * increment);\n    increment++;\n  }\n}\n')),"\n",r.createElement(t.p,null,"To simulate the CPU 'typing' out its answer, I dispatched events to the on-screen keyboard, simulating a player interacting with the keyboard. This eliminated the need to write unique animation logic for the CPU's side of the game."),"\n",r.createElement(t.p,null,"However, after initially writing this dispatch function, I noticed the event was not triggering. MDN's documentation was not explicit about whether ",r.createElement(t.code,null,"Event.bubbles")," defaulted to ",r.createElement(t.code,null,"true")," or ",r.createElement(t.code,null,"false"),". It was only after several rounds of trial and error, and research on StackOverflow did I realise this property was the source of the problem."),"\n",r.createElement("br"),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"2. Object methods for filtering dictionary words with ",r.createElement(t.em,null,"all")," valid letters")),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-javascript"},"///////////////////////////////////////////////////////////\n// CONTAINS VALID filter: shortlists words with all valid letters\nlet containsValidDuplicates = [];\nnoDupes.filter((word) => {\n  for (let i = 0; i < uniqueValid.length; i++) {\n    if (word.includes(uniqueValid[i]) == true)\n      containsValidDuplicates.push(word);\n  }\n});\nlet containsValidFrequency = {};\ncontainsValidDuplicates.forEach((word) => {\n  containsValidFrequency[word] = (containsValidFrequency[word] || 0) + 1;\n});\nlet filterValidByFrequency = Object.entries(containsValidFrequency);\nlet isolateContainsValid = filterValidByFrequency.filter(\n  (filteredWordsInArrayFormat) => {\n    if (filteredWordsInArrayFormat[1] === uniqueValid.length) {\n      return filteredWordsInArrayFormat;\n    }\n  }\n);\nlet trueValid = [];\nisolateContainsValid.forEach((wordArray) => trueValid.push(wordArray[0]));\nconsole.log(containsValidDuplicates);\n///////////////////////////////////////////////////////////\n")),"\n",r.createElement(t.p,null,"As I was still relatively inexperienced with data structure manipulation and algorithms at this point in my learning process, I struggled to filter words containing all valid letters. Initially I thought I could use the ",r.createElement(t.code,null,"Array.includes()")," method, but this produces an imperfect match. Words including some but not all, or words containing more copies of duplicate letters than what is correct, were included amongst the machine's guess list. Finally, I was able to settle on this relatively crude sorting function that utilises a hashmap."),"\n",r.createElement(t.h4,null,"Future Plans"),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"1. Refine sorting algorithm")),"\n",r.createElement(t.p,null,"Given more time, I would have refactored my sorting algorithm to combine the use of a hashmap with regex functions. A pattern similar to Leetcode's ",r.createElement(t.a,{href:"https://leetcode.com/problems/roman-to-integer/"},"Roman to Integer Question")," comes to mind."),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-javascript"},'var romanToInt = function (s) {\n  const dict = {\n    IV: 4,\n    IX: 9,\n    XL: 40,\n    XC: 90,\n    CD: 400,\n    CM: 900,\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000,\n  };\n\n  let count = 0;\n  let RE = new RegExp(Object.keys(dict).join("|"), "g");\n  s.replace(RE, function (matched) {\n    count += dict[matched];\n  });\n  return count;\n};\n')),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"2. Update CPU decision logic")),"\n",r.createElement(t.p,null,"I had initially also wanted to create a toggle to allow players to modify the difficulty of the game. At base, the CPU would always be aware of bad (grey) letters."),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.code,null,"Easy mode"),": CPU knows placed (green) letters only. But not the placement of green letters."),"\n",r.createElement(t.li,null,r.createElement(t.code,null,"Medium mode"),": CPU knows green and valid (yellow) letters. It would also know the placement of green letters, but not yellow letters."),"\n",r.createElement(t.li,null,r.createElement(t.code,null,"Hard mode"),": CPU has the same knowledge as players: green and yellow letters, as well as their placement are known to CPU."),"\n"),"\n",r.createElement(t.p,null,"In the current iteration of the game, the sorting algorithm only receives information regarding the validity of the letters. It does not receive information about their placement. I would need to refactor the sorting algorithms to include placement (indices) in the calculation, as well as split the algorithm into multiple parts/ write separate functions to accommodate switching game modes."),"\n",r.createElement(t.p,null,"This might also increase computation load, particularly if I expanded the dictionary in future. Therefore I would need to ensure that the time complexity of such sorting algorithms are taken into account."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"3. Allow Players to Submit Words")),"\n",r.createElement(t.p,null,"The word dictionary was borrowed and refined from ",r.createElement(t.a,{href:"https://gist.github.com/dracos/dd0668f281e685bad51479e5acaadb93"},"dracos' gist"),". Wardle test players (aka my dear frineds) flagged some notable issues:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Lots of scrabble words were included (which makes the game feel 'unfair')"),"\n",r.createElement(t.li,null,"Common plural versions of words (e.g. pains, prays, hopes) were previously missing from the list ((these have since been added))."),"\n"),"\n",r.createElement(t.p,null,"If I could set up a cheap database (e.g. using Gsheets/Airtable + Sheety api) and make a basic form for users to submit requests to add/ remove words, the overall quality of the word base would improve over time as people used it."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"4. Moonshot plans")),"\n",r.createElement(t.p,null,"Perhaps use Wardle as a base project to build a python machine learning project on top of. The game could then be expanded beyond just copying Wordle's base mechanics (e.g. 5 letters) to possibly include more letters or even incorporate more unique features such as themed tourneys (e.g. given the theme 'cocktails', only cocktail names with a certain number of letters are valid guesses)."))}var s=function(e){void 0===e&&(e={});var t=Object.assign({},(0,l.ah)(),e.components).wrapper;return t?r.createElement(t,e,r.createElement(i,e)):i(e)}},841:function(e,t,n){n.d(t,{Z:function(){return r}});var l=n(7294),r=function(e){var t=e.src,n=e.alt,r=e.maxWidth;return l.createElement("div",{className:"index-module--wrapper--8497f",style:{maxWidth:r}},l.createElement("img",{src:t,alt:n}))}}}]);
//# sourceMappingURL=component---src-pages-projects-raws-wardle-mdx-0f39c4ad6c6d1ca0f23a.js.map