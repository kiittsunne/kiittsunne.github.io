{"componentChunkName":"component---src-pages-projects-mdx-frontmatter-slug-tsx-content-file-path-users-kit-code-projects-portfolio-src-pages-projects-raws-triviago-mdx","path":"/projects/triviago/","result":{"data":{"mdx":{"body":"\nimport Table from \"../../../components/table\";\n\n### Project Overview\n\nMy friends and I enjoy puzzle hunts and knowing lots of random trivia is usually helpful. This made me think of creating Triviago partly as a training tool, partly as a fun side project, and partly as a way to explore newer frontend technologies.\n\nIn the end, the game has 3 'game modes':\n\n<Table\n  headerRow={[\"Feeling Lucky\", \"Normal Quiz\", \"Sudden Death\"]}\n  rows={[\n    [\n      \"https://res.cloudinary.com/kiittsunne/video/upload/e_loop:10,br_3564k,c_scale,f_gif,h_600,q_100/v1665656903/2022-10-13_18.04.00_n3blah.gif\",\n      \"https://res.cloudinary.com/kiittsunne/video/upload/e_loop:10,br_3564k,c_scale,f_gif,h_600,q_100/v1665656903/2022-10-13_18.03.55_yf0ttb.gif\",\n      \"https://res.cloudinary.com/kiittsunne/video/upload/e_loop:10,br_3564k,c_scale,f_gif,h_600,q_100/v1665656903/2022-10-13_18.03.46_jonlba.gif\",\n    ],\n    [\n      \"Slot machine tiles represent themes and 12 questions from each unique theme will be fetched\",\n      \"Choose multiple categories, set difficulty and limit number of questions\",\n      \"Player gets 30 hard questions, 10s to answer each question and lose lives if wrong/ no answer\",\n    ],\n  ]}\n/>\n\n<hr />\n\n### Developer Installation & Build\n\n**Start Vite Developer Server**: `npm run dev`\n\n**Build Production**: `npm run build`\n\n**[Deployment Resources](https://vitejs.dev/guide/static-deploy.html#github-pages)**\n\n<hr />{\" \"}\n\n### Retrospective: Process Notes, Key Learning Points, Future Plans\n\n#### Process notes:\n\n**1. [WDS React/Typescript multiselect component tutorial](https://www.youtube.com/watch?v=bAJlYgeovlg)**\n\n- Followed along and then rebuilt the component from memory/ by feel for this project\n- Differences:\n  - WDS used Bootstrap, I rewrote css using Tailwind.\n  - Data types also had to be redefined to accommodate api params submission\n\n**2. [FreeCodeCamp React/Typescript quiz app](https://www.youtube.com/watch?v=F2JCjVSZlG0)**\n\n- Similar to WDS selector tutorial, I originally coded along. Built \"Normal Quiz\" section from memory/feel.\n- Differences:\n  - FCC used a different trivia api & styled-components.\n  - I expanded on the base project with the SlotMachine and SuddenDeath quiz types.\n\n#### Reverse engineering code:\n\n**1. [Victor Toschi's vanilla DOM-Manipulation slot machine](https://medium.com/@victortoschi/how-to-create-a-slot-machine-animation-with-css-and-javascript-9073ab9db9ea)**\n\nI didn't read the Medium article, but focused on his [Codepen](https://codepen.io/toschivictor/pen/JjNZjEj). Took about 1h to fully understand and test what his JS logic was doing, then rewrote it in React.\n\n_Learning Points:_\n\n- Got familiar with useRef: because my implementation still relies on CSS animations rather than state manipulation, could not rely on `useState` to capture and send information to API function call. Used useRef instead to capture data from DOM without re-rendering.\n\n- Challenges: working with HTML DOM Object properties and Typescript was an interesting challenge. Previously without typechecking, I didn't think twice about doing something like the below. But with TS i was more mindful about optionally chaining properties.\n\n```javascript\n// before:\nonTransitionEnd={() => {\n\n    const last = document.getElementById(\"doorOne\")?.lastChild.id;\n    // `.id` would throw err because it's not a guaranteed property\n\n    // setting useRef\n    tagInputs.current.push(`${last}`);\n}}\n\n//after:\nonTransitionEnd={() => {\n\n    const nodes = document.getElementById(\"doorOne\")?.children;\n\n    const last = nodes && nodes[nodes.length - 1]?.id;\n\n    // setting useRef\n    tagInputs.current.push(`${last}`);\n}}\n```\n\n**Key Learning Points**\n\n1. Practiced TypeScript in a React project\n2. Exposure to useRef use cases\n3. Exposure to TailwindCSS\n4. Learnt deployment process of Vite to github pages\n5. Learnt basic CI/CD with github workflow - auto update production build on git push\n\n**Future Plans**\n\n1. Integrate Google Analytics to track user behaviour and display interesting statistics (e.g. like Wordle's summary graph)\n","frontmatter":{"demo":"https://kiittsunne.github.io/triviago/","github":"https://github.com/kiittsunne/triviago","title":"Triviago","byline":"Responsive Quiz App","technologies":["TypeScript","React","TailwindCSS","Vite"]}}},"pageContext":{"id":"c3c390a3-dad5-5c0b-9435-67210d591554","frontmatter__slug":"triviago","__params":{"frontmatter__slug":"triviago"},"frontmatter":{"title":"Triviago","byline":"Responsive Quiz App","slug":"triviago","description":"A responsive Frontend Quiz App made with Vite (React/Typescript) + Tailwind. Hosted on Github Pages. Content courtesy of The Trivia API: https://the-trivia-api.com/docs/ ","technologies":["TypeScript","React","TailwindCSS","Vite"],"github":"https://github.com/kiittsunne/triviago","demo":"https://kiittsunne.github.io/triviago/","published":true,"id":1}}},"staticQueryHashes":[]}